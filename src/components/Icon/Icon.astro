---
import type { HTMLAttributes } from "astro/types";
import { iconPaths } from "../../utils/icons/IconPaths";
import type { IconPathsProps } from "../../utils/icons/types";

type Props = {
  icon: keyof IconPathsProps;
  color?: string;
  isGradient?: boolean;
  size?: string;
};

const { color = "currentcolor", icon, isGradient, size } = Astro.props;
const iconPath = iconPaths[icon];
const sizeAttributes: HTMLAttributes<"svg"> = size
  ? { style: { "--size": size } }
  : {};

const gradientId = `icon-gradient-${Math.round(Math.random() * 10e12).toString(
  36
)}`;
---

<svg
  class="icon-svg"
  xmlns="http://www.w3.org/2000/svg"
  width="40"
  height="40"
  viewBox="0 0 256 256"
  aria-hidden="true"
  aria-label={`${icon} icon`}
  stroke={isGradient ? `url(#${gradientId})` : color}
  fill={isGradient ? `url(#${gradientId})` : color}
  {...sizeAttributes}
>
  <g set:html={iconPath} />
  {
    isGradient && (
      <linearGradient
        id={gradientId}
        x1="23"
        x2="235"
        y1="43"
        y2="202"
        gradientUnits="userSpaceOnUse"
      >
        <stop stop-color="var(--gradient-stop-1)" />
        <stop offset=".5" stop-color="var(--gradient-stop-2)" />
        <stop offset="1" stop-color="var(--gradient-stop-3)" />
      </linearGradient>
    )
  }
</svg>
